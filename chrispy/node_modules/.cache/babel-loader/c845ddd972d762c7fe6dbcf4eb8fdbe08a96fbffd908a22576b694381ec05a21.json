{"ast":null,"code":"var _jsxFileName = \"/home/rajesh/Desktop/srihari new user/FoodMart-React-Js/chrispy/src/hooks/useAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, createContext, useContext } from 'react';\nimport * as userService from '../services/userService';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(userService.getUser());\n  const login = async (email, password) => {\n    try {\n      const user = await userService.login(email, password);\n      setUser(user);\n      toast.success('Login successfully');\n    } catch (error) {\n      toast.error(err.response.data);\n    }\n  };\n  const logout = () => {\n    userService.logout();\n    setUser(null);\n    toast.success('Logout successfully');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"d433BNb37faEp65cAsZrPTk+Szo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useState","createContext","useContext","userService","toast","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","getUser","login","email","password","success","error","err","response","data","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/home/rajesh/Desktop/srihari new user/FoodMart-React-Js/chrispy/src/hooks/useAuth.js"],"sourcesContent":["import {useState, createContext,useContext} from 'react';\nimport * as userService from '../services/userService';\nimport {toast} from 'react-toastify';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({children})=>{\n    const [user, setUser] = useState(userService.getUser());\n\n    const login = async (email, password) => {\n        try {\n            const user = await userService.login(email, password);\n            setUser(user);\n            toast.success('Login successfully');\n        } catch (error) {\n            toast.error(err.response.data);\n        }\n    }\n    \n\n    const logout = () => {\n        userService.logout();\n        setUser(null);\n        toast.success('Logout successfully');\n    }\n\n    return(\n        <AuthContext.Provider value={{user, login, logout}}>\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport const useAuth = () => useContext(AuthContext);"],"mappings":";;;AAAA,SAAQA,QAAQ,EAAEC,aAAa,EAACC,UAAU,QAAO,OAAO;AACxD,OAAO,KAAKC,WAAW,MAAM,yBAAyB;AACtD,SAAQC,KAAK,QAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAG;EAAAC,EAAA;EACtC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAACG,WAAW,CAACU,OAAO,CAAC,CAAC,CAAC;EAEvD,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACrC,IAAI;MACA,MAAML,IAAI,GAAG,MAAMR,WAAW,CAACW,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;MACrDJ,OAAO,CAACD,IAAI,CAAC;MACbP,KAAK,CAACa,OAAO,CAAC,oBAAoB,CAAC;IACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZd,KAAK,CAACc,KAAK,CAACC,GAAG,CAACC,QAAQ,CAACC,IAAI,CAAC;IAClC;EACJ,CAAC;EAGD,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACjBnB,WAAW,CAACmB,MAAM,CAAC,CAAC;IACpBV,OAAO,CAAC,IAAI,CAAC;IACbR,KAAK,CAACa,OAAO,CAAC,qBAAqB,CAAC;EACxC,CAAC;EAED,oBACIX,OAAA,CAACC,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAACb,IAAI;MAAEG,KAAK;MAAEQ;IAAM,CAAE;IAAAb,QAAA,EAC9CA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAAlB,EAAA,CAzBYF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AA2BzB,OAAO,MAAMsB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM7B,UAAU,CAACK,WAAW,CAAC;AAAA;AAACwB,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}