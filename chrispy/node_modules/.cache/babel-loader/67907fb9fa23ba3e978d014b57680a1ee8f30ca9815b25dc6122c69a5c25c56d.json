{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport { useCart } from '../../hooks/useCart';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { toast } from 'react-toastify';\nimport { createOrder } from '../../services/orderService';\nimport classes from './checkoutPage.module.css';\nimport Tile from '../../components/Title/Tile';\n;\nimport Input from '../../components/Input/Input';\nimport Button from '../../components/Button/Button';\nexport default function CheckoutPage() {\n  _s();\n  const {\n    cart\n  } = useCart();\n  const {\n    user\n  } = useAuth();\n  const navigate = useNavigate();\n  const [order, setOrder] = useState({\n    ...cart\n  });\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit\n  } = useForm();\n  const submit = async data => {\n    if (!order.addressLatLng) {\n      toast.warning('Please select your location on the map');\n      return;\n    }\n    await createOrder({\n      ...order,\n      name: name,\n      address: data.address\n    });\n    navigate('/payment');\n\n    //Send order to the server\n    await fetch('/api/orders', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${user.token}`\n      },\n      body: JSON.stringify(order)\n    });\n\n    //Clear the cart\n    setOrder({});\n    toast.success('Order placed successfully');\n    navigate('/');\n  };\n}\n_s(CheckoutPage, \"A6nVlSPrYUu5mxIXG2XpGxQRhFg=\", false, function () {\n  return [useCart, useAuth, useNavigate, useForm];\n});\n_c = CheckoutPage;\nvar _c;\n$RefreshReg$(_c, \"CheckoutPage\");","map":{"version":3,"names":["React","useCart","useAuth","useNavigate","useState","useForm","toast","createOrder","classes","Tile","Input","Button","CheckoutPage","_s","cart","user","navigate","order","setOrder","register","formState","errors","handleSubmit","submit","data","addressLatLng","warning","name","address","fetch","method","headers","token","body","JSON","stringify","success","_c","$RefreshReg$"],"sources":["/home/rajesh/Desktop/srihari new user/FoodMart-React-Js/chrispy/src/pages/Checkout/CheckoutPage.js"],"sourcesContent":["import React from 'react';\nimport { useCart } from '../../hooks/useCart';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useNavigate } from 'react-router-dom';\nimport { useState } from 'react';\nimport { useForm } from'react-hook-form';\nimport { toast } from'react-toastify';\nimport { createOrder } from '../../services/orderService';\nimport classes from './checkoutPage.module.css';\nimport Tile from '../../components/Title/Tile';;\nimport Input from '../../components/Input/Input';\nimport Button from '../../components/Button/Button';\nexport default function CheckoutPage() {\n    const { cart } = useCart()\n    const { user } = useAuth()\n    const navigate = useNavigate();\n    const [order, setOrder] = useState({...cart })\n\n      const{\n        register,\n        formState:{errors},\n        handleSubmit\n    } = useForm();\n\n    const submit = async data => {\n        if(!order.addressLatLng){\n            toast.warning('Please select your location on the map')\n            return\n        }\n\n         await createOrder({...order,name:name, address: data.address});\n         navigate('/payment');\n\n        //Send order to the server\n        await fetch('/api/orders', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${user.token}`\n            },\n            body: JSON.stringify(order)\n        })\n\n        //Clear the cart\n        setOrder({})\n        toast.success('Order placed successfully')\n        navigate('/')\n\n    }\n\n \n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAO,iBAAiB;AACxC,SAASC,KAAK,QAAO,gBAAgB;AACrC,SAASC,WAAW,QAAQ,6BAA6B;AACzD,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,IAAI,MAAM,6BAA6B;AAAC;AAC/C,OAAOC,KAAK,MAAM,8BAA8B;AAChD,OAAOC,MAAM,MAAM,gCAAgC;AACnD,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM;IAAEC;EAAK,CAAC,GAAGb,OAAO,CAAC,CAAC;EAC1B,MAAM;IAAEc;EAAK,CAAC,GAAGb,OAAO,CAAC,CAAC;EAC1B,MAAMc,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC;IAAC,GAAGU;EAAK,CAAC,CAAC;EAE5C,MAAK;IACHK,QAAQ;IACRC,SAAS,EAAC;MAACC;IAAM,CAAC;IAClBC;EACJ,CAAC,GAAGjB,OAAO,CAAC,CAAC;EAEb,MAAMkB,MAAM,GAAG,MAAMC,IAAI,IAAI;IACzB,IAAG,CAACP,KAAK,CAACQ,aAAa,EAAC;MACpBnB,KAAK,CAACoB,OAAO,CAAC,wCAAwC,CAAC;MACvD;IACJ;IAEC,MAAMnB,WAAW,CAAC;MAAC,GAAGU,KAAK;MAACU,IAAI,EAACA,IAAI;MAAEC,OAAO,EAAEJ,IAAI,CAACI;IAAO,CAAC,CAAC;IAC9DZ,QAAQ,CAAC,UAAU,CAAC;;IAErB;IACA,MAAMa,KAAK,CAAC,aAAa,EAAE;MACvBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUhB,IAAI,CAACiB,KAAK;MACzC,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAClB,KAAK;IAC9B,CAAC,CAAC;;IAEF;IACAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACZZ,KAAK,CAAC8B,OAAO,CAAC,2BAA2B,CAAC;IAC1CpB,QAAQ,CAAC,GAAG,CAAC;EAEjB,CAAC;AAGL;AAACH,EAAA,CAvCuBD,YAAY;EAAA,QACfX,OAAO,EACPC,OAAO,EACPC,WAAW,EAOxBE,OAAO;AAAA;AAAAgC,EAAA,GAVSzB,YAAY;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}